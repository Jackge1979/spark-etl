package com.yxt.bigdata.etl.connector.rdbms.common

import java.sql.{Connection, DatabaseMetaData, DriverManager, ResultSet, ResultSetMetaData, SQLException, Statement}
import java.util.Properties

import com.typesafe.config.Config
import org.apache.spark.sql.types.StructType


class DBUtil(private val conf: Config) extends Serializable {
  val userName: String = conf.getString(Key.USERNAME)

  val password: String = conf.getString(Key.PASSWORD)

  val driver: String = conf.getString(Key.DRIVER)

  val jdbcUrl: String = conf.getString(Key.JDBC_URL)

  val jdbcProperties: Properties = {
    // 构建连接属性
    val connectionProperties = new Properties()
    connectionProperties.setProperty("user", userName)
    connectionProperties.setProperty("password", password)
    connectionProperties.setProperty("driver", driver)
    connectionProperties
  }

  def getConnection(): Connection = {
    Class.forName(driver)
    DriverManager.getConnection(jdbcUrl, jdbcProperties)
  }

  def closeDB(rs: ResultSet, stmt: Statement, conn: Connection): Unit = {
    if (null != rs) {
      try {
        rs.close()
      } catch {
        case e: SQLException => e.printStackTrace()
      }
    }

    if (null != stmt) {
      try {
        stmt.close()
      } catch {
        case e: SQLException => e.printStackTrace()
      }
    }

    if (null != conn) {
      try {
        conn.close()
      } catch {
        case e: SQLException => e.printStackTrace()
      }
    }
  }

  def getAllColumns(tableName: String): Array[String] = {
    var conn: Connection = getConnection()
    var stmt: Statement = null
    var rs: ResultSet = null
    var columns = Array[String]()

    try {
      stmt = conn.createStatement()
      rs = stmt.executeQuery(s"SELECT * FROM $tableName WHERE 1=0")
      val rsmd = rs.getMetaData
      for (i <- 0 until rsmd.getColumnCount) {
        columns :+= rsmd.getColumnName(i + 1).toLowerCase
      }
    } catch {
      case e: Exception => e.printStackTrace()
    } finally {
      closeDB(null, null, conn)
    }

    columns
  }

  def getDDL(tableName: String): String = {
    val conn: Connection = getConnection()
    var stmt: Statement = null
    var rs: ResultSet = null
    val ddl = new StringBuilder()

    try {
      stmt = conn.createStatement()
      rs = stmt.executeQuery(s"select * from $tableName where 1=0")

      val meta: DatabaseMetaData = conn.getMetaData
      val rsmd: ResultSetMetaData = rs.getMetaData
      val ncols = rsmd.getColumnCount

      // columns
      ddl.append(s"CREATE TABLE `%s` (\n")
      for (i <- 0 until ncols) {
        val columnName = rsmd.getColumnLabel(i + 1)
        val typeName = rsmd.getColumnTypeName(i + 1)
        val fieldSize = {
          if ("DATETIME".equals(typeName)) 6
          else rsmd.getPrecision(i + 1)
        }
        val nullable = if (rsmd.isNullable(i + 1) == 0) "NOT NULL" else ""
        val isAutoIncrement = if (rsmd.isAutoIncrement(i + 1)) "AUTO_INCREMENT" else ""

        ddl.append(s"`$columnName` $typeName($fieldSize) $nullable $isAutoIncrement,\n")
      }

      // primaryKeys
      val primaryKeys = meta.getPrimaryKeys("", "", tableName)
      while (primaryKeys.next()) {
        val pkName = primaryKeys.getString("COLUMN_NAME")
        ddl.append(s"PRIMARY KEY (`$pkName`),\n")
      }
      // 删除最后一个逗号
      ddl.deleteCharAt(ddl.length - 2)
      ddl.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;")
    } catch {
      case e: Exception => e.printStackTrace()
    } finally {
      closeDB(rs, stmt, conn)
    }

    ddl.toString()
  }

  def getDDL(rddSchema: StructType): String = {
    for (structField <- rddSchema.fields) {
      structField.dataType
    }
    ""
  }

  def createTableIfNotExists(tableName: String, ddl: String): Unit = {
    val conn: Connection = getConnection()
    conn.setAutoCommit(false)
    val stmt: Statement = conn.createStatement()

    var flag = true
    val checkSql = s"select * from $tableName where 1=0"
    try {
      stmt.execute(checkSql)
      flag = false
    } catch {
      case _: Exception => {
        try {
          stmt.execute(ddl.format(tableName))
          conn.commit()
        } catch {
          case e: Exception => {
            e.printStackTrace()
            conn.rollback()
          }
        }
      }
    } finally {
      closeDB(null, stmt, conn)
    }
  }
}
