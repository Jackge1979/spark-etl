package com.yxt.bigdata.etl

import com.yxt.bigdata.etl.connector.hive.writer.HiveWriter
import org.apache.spark.sql.{DataFrame, SaveMode, SparkSession}


object MainHandler {
  def main(args: Array[String]): Unit = {
    val spark = SparkSession.builder()
      .appName("demo")
      .enableHiveSupport()
      .getOrCreate()

        val job = new JobParser("mysqlToHive.json")
        val writer = job.getWriter
        for (reader <- job.getReaders) {
          val readerTableName = reader.tableName
          val tmpReaderTableName = genTmpTableName(readerTableName)

          // 数据库查询
          var df = reader.getDataFrame(spark, readerTableName)
          // 输出schema
          df.printSchema()
          df.createOrReplaceTempView(tmpReaderTableName)

          val readerColumns = reader.columns
          val writerColumns = writer.columns
          if (readerColumns.length != writerColumns.length) {
            throw new Exception("列配置信息有误，因为您配置的任务中，源头读取字段数：%d 与 目标表要写入的字段数：%d 不相等，请检查您的配置并作出修改。")
          }

          val columnsWithAlias = new StringBuilder()
          for (i <- readerColumns.indices) {
            val rc = readerColumns(i)
            val wc = writerColumns(i)
            if (rc.equals(wc)) columnsWithAlias.append(s" $rc")
            else columnsWithAlias.append(s"$rc AS $wc")
            if (i < readerColumns.length - 1) columnsWithAlias.append(",")
          }

          df = spark.sql(
            s"""
               |SELECT ${columnsWithAlias.toString} FROM $tmpReaderTableName
            """.stripMargin)

          writer.saveTable(df)
//          writer.saveTable(df)
//
//          df.write
//            .mode(SaveMode.Overwrite)
//            .option("header", "true")
//            .csv("/tmp/org")

      }


  }

  def genTmpTableName(originalTableName: String): String = {
    var tmpTableName: String = null
    val sepTableName = originalTableName.split("[.]")
    val len = sepTableName.length

    if (len == 1) tmpTableName = s"tmp_$originalTableName"
    else if (len == 2) {
      val Array(_, table) = sepTableName
      tmpTableName = s"tmp_$table"
    }
    else throw new Exception(s"表名配置信息有误，您的表名为：$originalTableName , 而目前支持的表名格式有两种：'database.table' 和 'table'，请检查您的配置并作出修改。")

    tmpTableName
  }
}